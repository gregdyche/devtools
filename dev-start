#!/bin/bash
# dev-start: Simple development environment checker
# Reports status and missing requirements without taking actions

set -e

check_git_repo() {
    if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        echo "❌ Not in a Git repository"
        return 1
    fi
    echo "📁 Project: $(basename "$(pwd)")"
}

check_git_status() {
    echo ""
    echo "📋 Git Status"
    echo "============="
    
    if [ -n "$(git status --porcelain)" ]; then
        echo "⚠️  Uncommitted changes detected:"
        git status --short
        echo ""
        echo "📝 Suggestion: Commit or stash changes before development"
    else
        echo "✅ Working directory clean"
        local current_branch
        current_branch=$(git branch --show-current)
        echo "📍 Current branch: $current_branch"
        
        if git fetch > /dev/null 2>&1; then
            local behind
            behind=$(git rev-list --count HEAD..origin/$current_branch 2>/dev/null || echo "0")
            if [ "$behind" -gt 0 ]; then
                echo "⚠️  $behind commits behind origin/$current_branch"
                echo "📝 Suggestion: Pull latest changes with 'git pull'"
            else
                echo "✅ Up to date with origin"
            fi
        fi
    fi
}

check_python_venv() {
    echo ""
    echo "🐍 Python Virtual Environment"
    echo "============================="
    
    local venv_paths=()
    for d in */; do
        [ -f "$d/bin/activate" ] && venv_paths+=("$d")
    done
    
    if [ "${#venv_paths[@]}" -eq 1 ]; then
        echo "✅ Virtual environment found: ${venv_paths[0]%/}"
        if [ -z "$VIRTUAL_ENV" ]; then
            echo "📝 Suggestion: Activate with 'source ${venv_paths[0]}bin/activate'"
        else
            echo "✅ Virtual environment already active: $(basename "$VIRTUAL_ENV")"
        fi
    elif [ "${#venv_paths[@]}" -eq 0 ]; then
        echo "❌ No Python virtual environment found"
        echo "📝 Suggestion: Create one with 'python -m venv venv'"
    else
        echo "⚠️  Multiple virtual environments found:"
        printf '   - %s\n' "${venv_paths[@]%/}"
        echo "📝 Suggestion: Keep only one venv directory in project root"
    fi
}

check_project_structure() {
    echo ""
    echo "📁 Project Structure" 
    echo "===================="
    
    local standard_dirs=("src" "tests" "docs")
    local optional_dirs=("examples" "scripts" "data" "config" ".github")
    local missing_dirs=()
    
    # Check standard directories
    for dir in "${standard_dirs[@]}"; do
        if [ -d "$dir" ]; then
            echo "✅ $dir/ exists"
        else
            missing_dirs+=("$dir")
        fi
    done
    
    # Check optional directories
    for dir in "${optional_dirs[@]}"; do
        if [ -d "$dir" ]; then
            echo "✅ $dir/ exists"
        fi
    done
    
    if [ ${#missing_dirs[@]} -gt 0 ]; then
        echo "📝 Missing standard directories: ${missing_dirs[*]}"
        echo "   Suggestion: mkdir -p ${missing_dirs[*]}"
    fi
}

check_project_type() {
    echo ""
    echo "🔍 Project Type"
    echo "==============="
    
    local project_types=()
    [ -f "manage.py" ] && project_types+=("Django")
    [ -f "package.json" ] && project_types+=("Node.js")
    [ -f "requirements.txt" ] && project_types+=("Python")
    [ -f "pyproject.toml" ] && project_types+=("Python")
    [ -f "Dockerfile" ] && project_types+=("Docker")
    [ -f "docker-compose.yml" ] && project_types+=("Docker Compose")
    
    if [ ${#project_types[@]} -gt 0 ]; then
        echo "✅ Detected: ${project_types[*]}"
    else
        echo "❓ Generic project (no specific framework detected)"
    fi
}

check_ports() {
    echo ""
    echo "📡 Port Status"
    echo "=============="
    
    local busy_ports=()
    for port in 3000 5000 8000 8080; do
        if lsof -i :$port > /dev/null 2>&1; then
            local proc
            proc=$(lsof -i :$port | awk 'NR==2 {print $1}')
            busy_ports+=("$port ($proc)")
        fi
    done
    
    if [ ${#busy_ports[@]} -gt 0 ]; then
        echo "⚠️  Busy ports: ${busy_ports[*]}"
        echo "📝 Suggestion: Stop services or use different ports"
    else
        echo "✅ Common development ports (3000, 5000, 8000, 8080) available"
    fi
}

check_env_files() {
    echo ""
    echo "🔐 Environment Files"
    echo "==================="
    
    if [ -f ".env" ]; then
        echo "✅ .env file found"
        [ -f ".env.example" ] && echo "✅ .env.example reference file found"
        [ ! -f ".env.example" ] && echo "📝 Suggestion: Create .env.example as a template"
    else
        echo "❓ No .env file found"
        [ -f ".env.example" ] && echo "📝 Suggestion: Copy .env.example to .env and configure"
    fi
}

show_summary() {
    echo ""
    echo "💡 Quick Start Commands"
    echo "======================"
    
    [ -f "manage.py" ] && echo "   python manage.py runserver    # Django development server"
    [ -f "package.json" ] && echo "   npm run dev                   # Node.js development"
    [ -f "requirements.txt" ] && echo "   pip install -r requirements.txt  # Install Python dependencies"
    
    echo "   git status                    # Check git status"
    echo "   deactivate                    # Exit Python virtual environment"
}

main() {
    echo "🚀 Development Environment Check - $(date '+%Y-%m-%d %H:%M:%S')"
    echo "Location: $(pwd)"
    echo ""
    
    if ! check_git_repo; then
        exit 1
    fi
    
    check_git_status
    check_python_venv
    check_project_structure
    check_project_type
    check_ports
    check_env_files
    show_summary
    
    echo ""
    echo "✅ Environment check complete"
    echo "📝 Review suggestions above and take action as needed"
}

main "$@"