#!/bin/bash
# dev-start: Simple development environment checker
# Reports status and missing requirements without taking actions

set -e

VERBOSE=false
if [[ "$1" == "--verbose" ]]; then
    VERBOSE=true
fi

check_git_repo() {
    if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        echo "‚ùå Not in a Git repository"
        return 1
    fi
    if $VERBOSE; then
        echo "üìÅ Project: $(basename "$(pwd)")"
    fi
}

check_git_status() {
    if $VERBOSE; then
        echo ""
        echo "üìã Git Status"
        echo "============="
    fi
    
    if [ -n "$(git status --porcelain)" ]; then
        if $VERBOSE; then
            echo "‚ö†Ô∏è  Uncommitted changes detected:"
            git status --short
            echo ""
            echo "üìù Suggestion: Commit or stash changes before development"
        else
            echo "‚ö†Ô∏è  Uncommitted changes:"
            echo "git commit -am 'commit message' && git push"
        fi
    else
        if $VERBOSE; then
            echo "‚úÖ Working directory clean"
        fi
        local current_branch
        current_branch=$(git branch --show-current)
        if $VERBOSE; then
            echo "üìç Current branch: $current_branch"
        fi
        
        if git fetch > /dev/null 2>&1; then
            local behind
            behind=$(git rev-list --count HEAD..origin/$current_branch 2>/dev/null || echo "0")
            if [ "$behind" -gt 0 ]; then
                if $VERBOSE; then
                    echo "‚ö†Ô∏è  $behind commits behind origin/$current_branch"
                    echo "üìù Suggestion: Pull latest changes with 'git pull'"
                else
                    echo "‚ö†Ô∏è  $behind commits behind:"
                    echo "git pull"
                fi
            else
                if $VERBOSE; then
                    echo "‚úÖ Up to date with origin"
                fi
            fi
        fi
    fi
}

check_python_venv() {
    if $VERBOSE; then
        echo ""
        echo "üêç Python Virtual Environment"
        echo "============================="
    fi
    
    local venv_paths=()
    for d in */; do
        [ -f "$d/bin/activate" ] && venv_paths+=("$d")
    done
    
    if [ "${#venv_paths[@]}" -eq 1 ]; then
        if $VERBOSE; then
            echo "‚úÖ Virtual environment found: ${venv_paths[0]%/}"
        fi
        if [ -z "$VIRTUAL_ENV" ]; then
            if $VERBOSE; then
                echo "üìù Suggestion: Activate with 'source ${venv_paths[0]}bin/activate'"
            else
                echo "üêç Activate virtual environment:"
                echo "source ${venv_paths[0]}bin/activate"
            fi
        else
            if $VERBOSE; then
                echo "‚úÖ Virtual environment already active: $(basename "$VIRTUAL_ENV")"
            fi
        fi
    elif [ "${#venv_paths[@]}" -eq 0 ]; then
        if $VERBOSE; then
            echo "‚ùå No Python virtual environment found"
            echo "üìù Suggestion: Create one with 'python -m venv venv'"
        else
            echo "‚ùå No virtual environment:"
            echo "python -m venv venv"
        fi
    else
        if $VERBOSE; then
            echo "‚ö†Ô∏è  Multiple virtual environments found:"
            printf '   - %s\n' "${venv_paths[@]%/}"
            echo "üìù Suggestion: Keep only one venv directory in project root"
        else
            echo "‚ö†Ô∏è  Multiple virtual environments found"
        fi
    fi
}

check_project_structure() {
    if $VERBOSE; then
        echo ""
        echo "üìÅ Project Structure" 
        echo "===================="
    fi
    
    local standard_dirs=("src" "tests" "docs")
    local optional_dirs=("examples" "scripts" "data" "config" ".github")
    local missing_dirs=()
    
    # Check standard directories
    for dir in "${standard_dirs[@]}"; do
        if [ -d "$dir" ]; then
            if $VERBOSE; then
                echo "‚úÖ $dir/ exists"
            fi
        else
            missing_dirs+=("$dir")
        fi
    done
    
    # Check optional directories
    for dir in "${optional_dirs[@]}"; do
        if [ -d "$dir" ]; then
            if $VERBOSE; then
                echo "‚úÖ $dir/ exists"
            fi
        fi
    done
    
    if [ ${#missing_dirs[@]} -gt 0 ]; then
        if $VERBOSE; then
            echo "üìù Missing standard directories: ${missing_dirs[*]}"
            echo "   Suggestion: mkdir -p ${missing_dirs[*]}"
        else
            echo "üìÅ Missing directories:"
            echo "mkdir -p ${missing_dirs[*]}"
        fi
    fi
}

check_project_type() {
    if $VERBOSE; then
        echo ""
        echo "üîç Project Type"
        echo "==============="
        
        local project_types=()
        [ -f "manage.py" ] && project_types+=("Django")
        [ -f "package.json" ] && project_types+=("Node.js")
        [ -f "requirements.txt" ] && project_types+=("Python")
        [ -f "pyproject.toml" ] && project_types+=("Python")
        [ -f "Dockerfile" ] && project_types+=("Docker")
        [ -f "docker-compose.yml" ] && project_types+=("Docker Compose")
        
        if [ ${#project_types[@]} -gt 0 ]; then
            echo "‚úÖ Detected: ${project_types[*]}"
        else
            echo "‚ùì Generic project (no specific framework detected)"
        fi
    fi
}

check_ports() {
    if $VERBOSE; then
        echo ""
        echo "üì° Port Status"
        echo "=============="
    fi
    
    local busy_ports=()
    local ports_to_check=()
    
    # Add Flask port if Flask is detected
    if grep -q "flask" requirements.txt 2>/dev/null || grep -q "Flask" requirements.txt 2>/dev/null || [ -f "app.py" ] || [ -f "main.py" ]; then
        ports_to_check+=(5000)
    fi
    
    # Add other framework ports
    [ -f "package.json" ] && ports_to_check+=(3000)
    [ -f "manage.py" ] && ports_to_check+=(8000)
    [ -f "docker-compose.yml" ] && ports_to_check+=(8080)
    
    # If no specific framework detected, check common ports
    if [ ${#ports_to_check[@]} -eq 0 ]; then
        ports_to_check=(3000 5000 8000 8080)
    fi
    
    for port in "${ports_to_check[@]}"; do
        if lsof -i :$port > /dev/null 2>&1; then
            local proc
            proc=$(lsof -i :$port | awk 'NR==2 {print $1}')
            busy_ports+=("$port ($proc)")
        fi
    done
    
    if [ ${#busy_ports[@]} -gt 0 ]; then
        if $VERBOSE; then
            echo "‚ö†Ô∏è  Busy ports: ${busy_ports[*]}"
            echo "üìù Suggestion: Stop services or use different ports"
        else
            echo "‚ö†Ô∏è  Busy ports: ${busy_ports[*]}"
            echo "lsof -ti:PORT | xargs kill -9"
        fi
    else
        if $VERBOSE; then
            echo "‚úÖ Common development ports (3000, 5000, 8000, 8080) available"
        fi
    fi
}

check_env_files() {
    if $VERBOSE; then
        echo ""
        echo "üîê Environment Files"
        echo "==================="
    fi
    
    if [ -f ".env" ]; then
        if $VERBOSE; then
            echo "‚úÖ .env file found"
        fi
    else
        if $VERBOSE; then
            echo "‚ùì No .env file found"
        fi
    fi
}

show_summary() {
    if $VERBOSE; then
        echo ""
        echo "üí° Quick Start Commands"
        echo "======================"
        
        [ -f "manage.py" ] && echo "   python manage.py runserver    # Django development server"
        [ -f "package.json" ] && echo "   npm run dev                   # Node.js development"
        [ -f "requirements.txt" ] && echo "   pip install -r requirements.txt  # Install Python dependencies"
        
        echo "   git status                    # Check git status"
        echo "   deactivate                    # Exit Python virtual environment"
    else
        local has_commands=false
        
        if [ -f "manage.py" ]; then
            if ! $has_commands; then
                echo "üí° Quick start:"
                has_commands=true
            fi
            echo "python manage.py runserver"
        fi
        
        if [ -f "package.json" ]; then
            if ! $has_commands; then
                echo "üí° Quick start:"
                has_commands=true
            fi
            echo "npm run dev"
        fi
        
        if [ -f "requirements.txt" ]; then
            if ! $has_commands; then
                echo "üí° Quick start:"
                has_commands=true
            fi
            echo "pip install -r requirements.txt"
        fi
    fi
}

main() {
    if $VERBOSE; then
        echo "üöÄ Development Environment Check - $(date '+%Y-%m-%d %H:%M:%S')"
        echo "Location: $(pwd)"
        echo ""
    fi
    
    if ! check_git_repo; then
        exit 1
    fi
    
    check_git_status
    check_python_venv
    check_project_structure
    check_project_type
    check_ports
    check_env_files
    show_summary
    
    if $VERBOSE; then
        echo ""
        echo "‚úÖ Environment check complete"
        echo "üìù Review suggestions above and take action as needed"
    fi
}

main "$@"